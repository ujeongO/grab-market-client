비동기 방식
: 비동기 처리가 적용된 코드의 경우, 실행이 되면 다음 코드가 실행된다. 결과를 얻게 되면 인터프리터가 다른 코드를 처리하다가 중간에 비동기 처리의 결과를 처리하게 된다.
ex)
setTimeout(function() {
    console.log('3초 뒤 실행');
}, 3000);
console.log('바로 실행');
=> 결과: 바로 실행 > 3초 뒤 실행

동기 방식
: 비동기 방식과 달리 코드가 다 실행될 때까지 다른 코드로 넘어가지 않는다.

//------------------------------------------------------------------------------------------------------------------

비동기 처리를 지원하는 방식
1. 콜백 함수 활용(setTimeout, setInterval 등)
    → 함수가 나중에 불린다고 해서 콜백 함수. 함수의 인자에 함수를 넣는 방식으로 진행됨
2. Promise 객체 활용
    → js에서 비동기 처리를 지원하는 객체 중 하나. 정상적으로 실행이 끝난 후 실행되는 then(), 에러가 났을 때 실행되는 catch()를 가짐.
    → 대표적인 promise 객체로 fetch 가 있음.
ex)
// fetch 함수를 실행하면 promise 객체를 반환한다.
var result = fetch('URL 주소');         // result에는 promise 객체가 들어있음.

console.log('네트워크 통신 기다리지 않음1');
result.then(function(response) {
    // then() 에서는 콜백 함수를 입력
    // 성공적으로 실행 > response에는 fetch의 결과가 들어있음.
    console.log('정상적으로 실행');
}).catch(function(error) {
    // 실패했을 때 실행 > error에는 에러 관련 정보가 들어있음.
    console.log('에러 발생');
});
console.log('네트워크 통신 기다리지 않음');

//------------------------------------------------------------------------------------------------------------------

fetch() => js에서 네트워크 통신을 하도록 돕는 함수
fetch()보다 더 편한 방식 > axios(: 외부 라이브러리)
axios는 기본적으로 promise 객체를 반환한다.

★일단 axios 외부 라이브러리를 불러온다 (<script src='주소'></script> 형태)

axios.get('url 주소');                  // 정보를 받아올 때 사용하는 메소드 ex) 웹 서버에서 웹 다운, 내 상품 정보들 불러오기        => read
axios.post('url 주소', data 객체);      // 새로운 자원을 생성할 때 사용하는 메소드 ex) 로그인 아이디와 패스워드, 입력한 아티클 정보  => write

axios.get(url).then(function(result) {
    // 콜백 구조로 나중에 result에 통신 결과가 들어옴
    result에는 status, data 등 다양한 코드가 들어옴
}).catch(function(error) {
    // 에러가 발생했을 때 관련 정보가 들어감
});

//------------------------------------------------------------------------------------------------------------------

postman: 간이 서버 제작 프로그램
ex) 상품 정보를 객체 형태로 서버에 넣은 후,  mock server 주소를 axios.get(주소)에 넣음 > 네트워크 통신 시작(then, fetch)

//------------------------------------------------------------------------------------------------------------------

JSON: 데이터를 저장, 전송할 때 많이 사용되는 !데이터 형식!
ex) 네트워크 통신을 하면서 데이터를 주고 받을 때: json 형식으로 데이터를 구조화 > 전달
    개발 과정에서 간단한 데이터들을 저장할 때: 파일 형태로 저장해놓을 때
js 객체 표현식을 기본으로 함, js에서 JSON 객체를 기본으로 내장하고 있음.

!규칙!
{"key": value} 형태
value에는 문자열, 숫자, 배열, 객체를 넣을 수 있다.
값을 여러개 나열할 때는 ','를 넣는다.

//------------------------------------------------------------------------------------------------------------------

