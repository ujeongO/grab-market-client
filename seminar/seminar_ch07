React 사용하는 이유
> 페이지 별 코드를 따로 작성하게 되면 코드 양이 많아짐 > 유지보수가 어려움 >> React 사용

//------------------------------------------------------------------------------------------------------------------

node & npm
> node와 npm은 1+1 관계

//------------------------------------------------------------------------------------------------------------------

React 특징 !컴포넌트!
: UI를 표현하는 요소. 컴포넌트를 나눠서 개발하면 코드를 재활용할 수 있다는 장점이 있다.
> 컴포넌트 + 컴포넌트 + 컴포넌드 => 페이지

컴포넌트 만족 조건 2가지
1. 함수로 구성
2. 반드시 UI 요소를 return
        > UI 요소 = HTML 태그   ex) <MainPageComponent />

//------------------------------------------------------------------------------------------------------------------

export, import

기존 HTML에서 <script>로 모듈을 불러왔음 
> ES6에서는 import로 불러옴
ex)
import axios from 'axios'
import App from './App.js'

import 하기 위해서는 export가 먼저 되어있어야 한다.
ex)
function App() {
    return <h1>Hello</h1>
}
export default App;     // App 컴포넌트를 외부에서 사용할 수 있도록 export 하는 것

//------------------------------------------------------------------------------------------------------------------

부모, 자식 컴포넌트
부모 컴포넌트: 가장 바깥에 있는 컴포넌트
자식 컴포넌트: 최상위 컴포넌트 안에 포함되어 있는 컴포넌트
ex)
import ChildComponent from './ChildComponent'

function parentComponent() {
    return (
        <div>
            <h3>부모</h3>
            <div>
                <h4>자식</h4>
                <ChildComponent />
            </div>
        </div>
    )
}

export default parentComponent;

//------------------------------------------------------------------------------------------------------------------

JSX
: React에서 컴포넌트를 만들 때 사용되는 문법. 
→ js 파일에서 HTML 태그를 작성할 수 있는 이유 > jsx 문법을 사용하기 때문
ex)
function parentComponent() {
    return (
        <div>
            <h3>부모</h3>
            <div>
                <h4>자식</h4>
                <ChildComponent />
            </div>
        </div>
    )
}

//------------------------------------------------------------------------------------------------------------------

State, Props
: 컴포넌트에서 데이터를 관리할 때 사용하는 개념

props: 부모 > 자식 컴포넌트로 값을 넘겨줘야 할 때 사용.(정적)

ex) 부모 컴포넌트에서 상품 데이터들을 받고, 자식 컴포넌트에서 각각의 상품 정보들을 보여준다.
function parentComponent() {
    return (
        <div>
            <h3>부모</h3>
            <div>
                <h4>자식</h4>
                // HTML 태그의 Attribute를 넣듯이 prop을 정해준다.
                <ChildComponent name='민수' age={27} />
                <ChildComponent name='철수' age={28} />
            </div>
        </div>
    )
}

function ChildComponent(props) {
    const name = props.name;
    const age = props.age;

    return <h3>나는 {name}이고, 나이는 {age}살입니다.</h3>
}
export default ChildComponent;

state: 컴포넌트를 업데이트(렌더링)해줄 수 있는 장치.(동적)
                > 업데이트: 컴포넌트 코드가 재실행되는 것을 의미

state를 사용하기 위해선 useState를 사용한다.
ex)
import React from 'react';

function TimerComponent() {
    // 1. time에는 기본 값으로 0이 들어간다.
    const [time, setTime] = React.useState(0);
    // → Destructuring(비구조할당) 문법
    console.log('Component 업데이트');

    function updateTime() {
        setTime(time+1);
    }

    return (
        <div>
            <h3>{time}초</h3>
            // 클릭할 때마다 setTime으로 state 업데이트
            <button onClick={updateTime}>1씩 업</button>
        </div>
    )
}
export default TimerComponent;


=> props는 부모에게 받는 값, state는 컴포넌트 내에서 사용하는 값

//------------------------------------------------------------------------------------------------------------------

React 라이프사이클 useEffect

state가 무한으로 반복되면 에러 발생 > useEffect로 렌더링 제어
형태: useEffect(function, [ 모니터링 대상 ]);
ex)
function ComponentOnlyOnce() {
    const [time, setTime] = React.useState(0);
    // useEffect 두 번째 인자(배열)에 값이 없으면 딱 한 번만 로딩됨.
    React.useEffect(() => {
        setTime(time+1);    // state를 바꿔서 또 렌더링 되더라도 setTime은 호출되지X
        console.log('처음 렌더링 될 때 한 번 실행');
    }, []);
}